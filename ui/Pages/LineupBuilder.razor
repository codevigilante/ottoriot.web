@page "/lineup-optimizer"
@inject MetaService Meta
@inject OddsService OService
@inject PredictionsService PService

@if (Model != null)
{
    <Headline Title="lineup optimizer" Season="@Model.Season" Week="@Model.Week" />

    @if(!String.IsNullOrWhiteSpace(Error))
    {
        <p class="text-error">@Error</p>
    }

    @if (Pool != null)
    {
        <details open>
            <summary role="button" class="secondary">player pool</summary>
            <section id="lineup-options">
                <details role="list">
                    <summary aria-haspopup="listbox">start times</summary>
                    <ul role="listbox">
                        @foreach (StartTime start in Pool.Slates)
                        {
                            <li>
                                <label>
                                    <input type="checkbox" checked="@start.Selected" @onchange="() => Pool.ToggleStartTime(start)">
                                    @start.Start.ToString("ddd, HH:mm")) @start.NumGames @(start.NumGames > 1 ? "games" : "game")
                                </label>
                            </li>
                        }
                    </ul>
                </details>
                <small>@Pool.Slates.NumGamesSelected games selected</small>
                <p>
                    <a href="#" role="button" @onclick:preventDefault @onclick="OnGenerateClick">generate</a>
                </p>                
            </section>

            <section>
                <nav aria-label="breadcrumb">
                    <ul>
                        <li><a href="" class="@(FilterSettings == PositionFilter.QB ? "selected" : string.Empty)" @onclick="() => PositionClick(PositionFilter.QB)" @onclick:preventDefault>QB</a></li>
                        <li><a href="" class="@(FilterSettings == PositionFilter.RB ? "selected" : string.Empty)" @onclick="() => PositionClick(PositionFilter.RB)" @onclick:preventDefault>RB</a></li>
                        <li><a href="" class="@(FilterSettings == PositionFilter.WR ? "selected" : string.Empty)" @onclick="() => PositionClick(PositionFilter.WR)" @onclick:preventDefault>WR</a></li>
                        <li><a href="" class="@(FilterSettings == PositionFilter.TE ? "selected" : string.Empty)" @onclick="() => PositionClick(PositionFilter.TE)" @onclick:preventDefault>TE</a></li>
                        <li><a href="" class="@(FilterSettings == PositionFilter.DST ? "selected" : string.Empty)" @onclick="() => PositionClick(PositionFilter.DST)" @onclick:preventDefault>DST</a></li>
                        <li><a href="" class="@(FilterSettings == PositionFilter.FLEX ? "selected" : string.Empty)" @onclick="() => PositionClick(PositionFilter.FLEX)" @onclick:preventDefault>FLEX</a></li>
                    </ul>
                </nav>

                @if (Players != null)
                {
                    <figure>
                        <table>
                            <thead>
                                <tr>
                                    <th><small>act</small></th>
                                    <th><small>player</small></th>
                                    <th><small>fp</small></th>
                                    <th><small>$$</small></th>
                                    <th><small>m/u</small></th>
                                    <th><small>itt</small></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (PlayerData data in Players)
                                {
                                    @if (data.Available)
                                    {
                                        <tr>
                                            <td>
                                                <a href="#" class="contrast smaller" role="button" @onclick:preventDefault>+</a>
                                                <a href="#" class="contrast smaller" role="button" @onclick:preventDefault>x</a>
                                            </td>
                                            <td>
                                                @data.Projection.Name <br />
                                                <small>@data.Projection.Team</small>
                                                @if (!String.IsNullOrWhiteSpace(data.Projection.Status))
                                                    {
                                                    <small> &bull; <strong class="text-error">@data.Projection.Status</strong></small>
                                                    }
                                            </td>
                                            <td>@data.Projection.FP</td>
                                            <td>$@data.Projection.Salary</td>
                                            <td>
                                                <small>
                                                    @if (data.Projection.Matchup > 0)
                                                    {
                                                        <label class="success">@data.Projection.Matchup</label>
                                                        }
                                                        else
                                                        {
                                                        <label class="error">@data.Projection.Matchup</label>
                                                        }
                                                </small>
                                            </td>
                                            <td><small>@data.ITT</small></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </figure>
                }
                else
                {
                    <a href="#" aria-busy="true">grinding...</a>
                }
            </section>
        </details>
        <details>
            <summary role="button" class="secondary">lineups</summary>
            <p>this is where lineups appear when generated</p>
        </details>
    }
}

@code
{
    private MetaModel? Model = null;
    private IPlayerPool? Pool = null;
    private PositionFilter FilterSettings = PositionFilter.QB;
    private List<PlayerData>? Players = null;
    private string Error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Model = await Meta.Fetch();

        if (Model != null)
        {
            OddsModel? Odds = await OService.Fetch(Model.Season, Model.Week);
            PredictionModel? Predictions = await PService.Fetch(Model.Season, Model.Week);

            if (Odds == null || Predictions == null)
            {
                Error = $"well, I'm having trouble getting data for you for {Model.Season}.{Model.Week}. Can you try again?";

                return;
            }

            Pool = new PlayerPool(Odds, Predictions);
            Players = Pool.Players;

            PositionClick(FilterSettings);
        }
    }

    private void PositionClick(PositionFilter filter)
    {
        FilterSettings = filter;

        if (Pool == null)
        {
            return;
        }

        string filterString = FilterSettings.ToString().ToUpper();

        switch(FilterSettings)
        {
            case PositionFilter.QB:
            case PositionFilter.RB:
            case PositionFilter.WR:
            case PositionFilter.TE:
            case PositionFilter.DST:
                Players = Pool.Players.Where(p => p.Projection.Position == filterString).OrderByDescending(p => p.Projection.FP).ToList();
                break;
            case PositionFilter.FLEX:
                Players = Pool.Players.Where(p => p.Projection.Position == "RB" || p.Projection.Position == "WR" || p.Projection.Position == "TE").OrderByDescending(p => p.Projection.FP).ToList();
                break;
            default:
                Error = $"what are you doing? please stop.";
                break;
        }
    }

    private void OnGenerateClick()
    {
        try
        {
            ILineupGenerator lineupGen = apps.lineup.LineupBuilder.Create();
            ILineup lineup = lineupGen.Generate(Pool);

            Console.WriteLine("done generating:");

            foreach(PlayerData p in lineup.Players)
            {
                Console.WriteLine($"{p.Projection.Name} {p.Projection.Position} {p.Projection.FP}");
            }

            Console.WriteLine($"{lineup.TotalSalary}, {lineup.TotalProjectedFP}");
        }
        catch(Exception ex)
        {
            Error = $"EXCEPTION: {ex.Message}";
        }
    }
}