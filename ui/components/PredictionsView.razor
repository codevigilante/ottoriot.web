<section id="meta">
    <div class="container grid-lg">
        <div class="">
            <small class="chip">current: @Season week @Week</small>
            @if (Model == null)
            {
                <small class="chip">fetching...</small>
            }
            else
            {
                <small class="chip">@Model.Updated</small>
            }
        </div>
        @if (Model != null)
        {
            <div class="btn-group column mt-2">
                <button class="btn btn-sm @(FilterSettings == PositionFilter.QB ? "btn-primary" : string.Empty)" @onclick="() => PositionClick(PositionFilter.QB)">QB</button>
                <button class="btn btn-sm @(FilterSettings == PositionFilter.RB ? "btn-primary" : string.Empty)" @onclick="() => PositionClick(PositionFilter.RB)">RB</button>
                <button class="btn btn-sm @(FilterSettings == PositionFilter.WR ? "btn-primary" : string.Empty)" @onclick="() => PositionClick(PositionFilter.WR)">WR</button>
                <button class="btn btn-sm @(FilterSettings == PositionFilter.TE ? "btn-primary" : string.Empty)" @onclick="() => PositionClick(PositionFilter.TE)">TE</button>
                <button class="btn btn-sm @(FilterSettings == PositionFilter.DST ? "btn-primary" : string.Empty)" @onclick="() => PositionClick(PositionFilter.DST)">DST</button>
                <button class="btn btn-sm @(FilterSettings == PositionFilter.FLEX ? "btn-primary" : string.Empty)" @onclick="() => PositionClick(PositionFilter.FLEX)">FLEX</button>
            </div>
            
            <!--
        <div class="btn-group column mt-2">
            @foreach(AvailableSlate slate in Model.Slates)
            {
                <button class="btn btn-sm">@slate.Day &raquo; @slate.Time</button>
            }
        </div>
            -->
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>rnk</th>
                        <th>player</th>
                        <th>vs</th>
                        <th><button class="btn btn-sm tooltip @(SortSettings == SortBy.FP ? "btn-primary" : string.Empty)" @onclick="() => SortByClick(SortBy.FP)" data-tooltip="projected fantasy points">fp</button></th>
                        <th><button class="btn btn-sm tooltip @(SortSettings == SortBy.Salary ? "btn-primary" : string.Empty)" @onclick="() => SortByClick(SortBy.Salary)" data-tooltip="Yahoo salary">$$$</button></th>
                        <th><button class="btn btn-sm tooltip @(SortSettings == SortBy.Value ? "btn-primary" : string.Empty)" @onclick="() => SortByClick(SortBy.Value)" data-tooltip="DFS value">val</button></th>
                        <th><button class="btn btn-sm tooltip @(SortSettings == SortBy.Matchup ? "btn-primary" : string.Empty)" @onclick="() => SortByClick(SortBy.Matchup)" data-tooltip="matchup score">m/u</button></th>
                        <th><span class="tooltip" data-tooltip="big game probability, naive">bgp</span></th>
                        <th><span class="tooltip" data-tooltip="game time, Central Daylight Time">CDT</span></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (PredictionData data in Projections)
                    {
                        @if (data.GameTime >= DateTime.Now)
                        {
                            shown++;
                            <tr>
                                <td>@(num++)</td>
                                <td>
                                    @data.Name<br />
                                    @if (@FilterSettings == PositionFilter.FLEX)
                                        {
                                        <span class="text-tiny text-muted">@data.Position &bull; </span>
                                        }
                                    <span class="text-tiny text-muted">@data.Team</span>
                                    @if (!String.IsNullOrEmpty(@data.Status.Trim()))
                                        {
                                        <span class="text-tiny text-muted"> &bull; <span class="text-error text-bold">@data.Status</span></span>
                                        }
                                </td>
                                <td><span class="text-tiny">@data.Vs</span></td>
                                <td>@data.FP</td>
                                <td>@data.Salary</td>
                                <td>@data.Value</td>
                                <td>
                                    @if (data.Matchup > 0)
                                        {
                                        <span class="label label-success">@data.Matchup</span>
                                        }
                                        else
                                        {
                                        <span class="label label-error">@data.Matchup</span>
                                        }
                                </td>
                                <td><span class="text-tiny">@data.BGP</span></td>
                                <td><span class="text-tiny">@data.GameTime.ToString("ddd, HH:mm")</span></td>
                            </tr>
                        }
                        else
                        {
                            hidden++;
                        }
                    }
                </tbody>
            </table>
            @if(shown == 0)
            {
                <p class="my-2">Crunching the data for this week's projections. Check back Wednesday.</p>
            }
            <p><small><span class="bg-dark text-light p-1">@hidden already played</span></small></p>
        }
        else
        {
            <p>Fetching projections...</p>
        }
    </div>
</section>

@code
{
    [Parameter]
    public int Season { get; set; }
    [Parameter]
    public int Week { get; set; }
    private PredictionModel Model = null;
    private List<PredictionData> Projections = null;
    private PositionFilter FilterSettings = PositionFilter.QB;
    private SortBy SortSettings = SortBy.FP;
    private int num = 1;
    private int hidden = 0;
    private int shown = 0;

    protected override async Task OnInitializedAsync()
    {
        PredictionsService service = new PredictionsService();
        Model = await service.Fetch(Season, Week);
        Projections = Model.Filter(FilterSettings);

        Console.WriteLine($"got model: {Model.Season}.{Model.Week}");
    }

    private void PositionClick(PositionFilter filter)
    {
        Projections = Model.Filter(filter, SortSettings);
        FilterSettings = filter;
        num = 1;
        hidden = 0;
    }

    private void SortByClick(SortBy sort)
    {
        Projections = Model.Filter(FilterSettings, sort);
        SortSettings = sort;
        num = 1;
        hidden = 0;
    }

}

